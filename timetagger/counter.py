# -*- coding: utf-8 -*-"""@author: Nick Sorensen"""import sysimport numpyimport matplotlibtry:    import TimeTaggerexcept:    print ("Time Tagger lib is not in the search path.")    pyversion = sys.version_info    from winreg import ConnectRegistry, OpenKey, HKEY_LOCAL_MACHINE, QueryValueEx    registry_path = "SOFTWARE\\Python\\PythonCore\\" + str(pyversion.major) + "." + str(pyversion.minor) + "\\PythonPath\\Time Tagger"    reg = ConnectRegistry(None, HKEY_LOCAL_MACHINE)    key = OpenKey(reg, registry_path)     module_path = QueryValueEx(key,'')[0]    print ("adding " + module_path)    sys.path.append(module_path)    from TimeTagger import createTimeTagger, Combiner, Coincidence, Counter, Countrate, Correlation, TimeDifferences, TimeTagStream, Scope, Event, CHANNEL_UNUSED, UNKNOWN, LOW, HIGHfrom time import sleepfrom pylab import *ion()# create a timetagger instancetagger = createTimeTagger()tagger.reset()# apply the built-in test signal (~0.8 to 0.9 MHz) to channels 1 and 2tagger.setTestSignal([1,2,3,4,5,6,7,8], True)sleep(.5)cr = Countrate( tagger, channels=[1,2,3,4,5,6,7,8] )sleep(0.1)data = cr.getData()objects = ('1', '2', '3', '4', '5', '6', '7', '8')y_pos = np.arange(len(objects))barg = bar(y_pos, data, align='center', alpha=0.5)xticks(y_pos, objects)ylabel('Countrate (c/s)')title('Countrate')show()# retrieve the current bufferprint ("Count rates\n channel 1:    %i c/s\n channel 2:    %i c/s\n channel 3:    %i c/s\n"       " channel 4:    %i c/s\n channel 5:    %i c/s\n channel 6:    %i c/s\n "       "channel 7:    %i c/s\n channel 8:    %i c/s" % tuple(cr.getData()))print ("")