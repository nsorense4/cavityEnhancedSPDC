# -*- coding: utf-8 -*-"""@author: Nick Sorensen"""import sysimport numpyimport matplotlibtry:    import TimeTaggerexcept:    print ("Time Tagger lib is not in the search path.")    pyversion = sys.version_info    from winreg import ConnectRegistry, OpenKey, HKEY_LOCAL_MACHINE, QueryValueEx    registry_path = "SOFTWARE\\Python\\PythonCore\\" + str(pyversion.major) + "." + str(pyversion.minor) + "\\PythonPath\\Time Tagger"    reg = ConnectRegistry(None, HKEY_LOCAL_MACHINE)    key = OpenKey(reg, registry_path)     module_path = QueryValueEx(key,'')[0]    print ("adding " + module_path)    sys.path.append(module_path)    from TimeTagger import createTimeTagger, Combiner, Coincidence, Counter, Countrate, Correlation, TimeDifferences, TimeTagStream, Scope, Event, CHANNEL_UNUSED, UNKNOWN, LOW, HIGHfrom time import sleep, timefrom pylab import *# create a timetagger instancetagger = createTimeTagger()tagger.reset()# Set the trigger level and deadtime for each channel[tagger.setTriggerLevel(i, 0.05) for i in range(8)][tagger.setDeadtime(i, 6000) for i in range(8)]tagger.sync()# apply the built-in test signal (~0.8 to 0.9 MHz) to channels 1 and 2tagger.setTestSignal([1,2,3,4,5,6,7,8], True)sleep(.5)coincidenceWindow = 5000 # coicidnce window in psinttime = 10 # integration time in sbinwidth_input = 200binnumber = 200# cross correlation between channels 1 and 2# binwidth=1000 ps, n_bins=3000, thus we sample 3000 nsion()corr = Correlation(tagger, channel_1=1, channel_2=2, binwidth=binwidth_input, n_bins=binnumber)tstart = time.time()               # for profilingsleep(1)figure()corr_plot, = plot(corr.getIndex()/1e3, corr.getData())xlabel('Time [ns]')ylabel('Clicks')title('Cross correlation between channel 1 and 2')for i in range(100000):    corr_plot.set_ydata(corr.getData())    draw()    sleep(0.5)